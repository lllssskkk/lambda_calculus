-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.UntypedLC.Syntax.Generated.SkelUntypedLC where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.UntypedLC.Syntax.Generated.AbsUntypedLC

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Ident -> Result
transIdent x = case x of
  Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Ident string -> failure x

transProg :: Show a => Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Prog' a -> Result
transProg x = case x of
  Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Program _ term -> failure x

transAtom :: Show a => Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Atom' a -> Result
transAtom x = case x of
  Language.UntypedLC.Syntax.Generated.AbsUntypedLC.AVar _ ident -> failure x
  Language.UntypedLC.Syntax.Generated.AbsUntypedLC.ATerm _ term -> failure x

transApplication :: Show a => Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Application' a -> Result
transApplication x = case x of
  Language.UntypedLC.Syntax.Generated.AbsUntypedLC.ApplicationAtom _ atom -> failure x
  Language.UntypedLC.Syntax.Generated.AbsUntypedLC.AApplication _ application atom -> failure x

transTerm :: Show a => Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Term' a -> Result
transTerm x = case x of
  Language.UntypedLC.Syntax.Generated.AbsUntypedLC.ApplicationTerm _ application -> failure x
  Language.UntypedLC.Syntax.Generated.AbsUntypedLC.LetIn _ ident term1 term2 -> failure x
  Language.UntypedLC.Syntax.Generated.AbsUntypedLC.LambdaAbs _ ident term -> failure x
