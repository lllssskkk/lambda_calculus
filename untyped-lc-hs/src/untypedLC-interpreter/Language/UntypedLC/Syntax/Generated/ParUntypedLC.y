-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Language.UntypedLC.Syntax.Generated.ParUntypedLC
  ( happyError
  , myLexer
  , pProg
  ) where

import Prelude

import qualified Language.UntypedLC.Syntax.Generated.AbsUntypedLC
import Language.UntypedLC.Syntax.Generated.LexUntypedLC

}

%name pProg_internal Prog
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('     { PT _ (TS _ 1) }
  ')'     { PT _ (TS _ 2) }
  '.'     { PT _ (TS _ 3) }
  '='     { PT _ (TS _ 4) }
  'in'    { PT _ (TS _ 5) }
  'lam'   { PT _ (TS _ 6) }
  'let'   { PT _ (TS _ 7) }
  L_Ident { PT _ (TV _)   }

%%

Ident :: { (Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position, Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Ident) }
Ident  : L_Ident { (uncurry Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position (tokenLineCol $1), Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Ident (tokenText $1)) }

Prog :: { (Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position, Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Prog) }
Prog
  : Term { (fst $1, Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Program (fst $1) (snd $1)) }

Atom :: { (Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position, Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Atom) }
Atom
  : Ident { (fst $1, Language.UntypedLC.Syntax.Generated.AbsUntypedLC.AVar (fst $1) (snd $1)) }
  | '(' Term ')' { (uncurry Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position (tokenLineCol $1), Language.UntypedLC.Syntax.Generated.AbsUntypedLC.ATerm (uncurry Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }

Application :: { (Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position, Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Application) }
Application
  : Atom { (fst $1, Language.UntypedLC.Syntax.Generated.AbsUntypedLC.ApplicationAtom (fst $1) (snd $1)) }
  | Application Atom { (fst $1, Language.UntypedLC.Syntax.Generated.AbsUntypedLC.AApplication (fst $1) (snd $1) (snd $2)) }

Term :: { (Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position, Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Term) }
Term
  : Application { (fst $1, Language.UntypedLC.Syntax.Generated.AbsUntypedLC.ApplicationTerm (fst $1) (snd $1)) }
  | 'let' Ident '=' Term 'in' Term { (uncurry Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position (tokenLineCol $1), Language.UntypedLC.Syntax.Generated.AbsUntypedLC.LetInTerm (uncurry Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | 'lam' Ident '.' Term { (uncurry Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position (tokenLineCol $1), Language.UntypedLC.Syntax.Generated.AbsUntypedLC.LambdaAbsTerm (uncurry Language.UntypedLC.Syntax.Generated.AbsUntypedLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProg :: [Token] -> Err Language.UntypedLC.Syntax.Generated.AbsUntypedLC.Prog
pProg = fmap snd . pProg_internal
}

