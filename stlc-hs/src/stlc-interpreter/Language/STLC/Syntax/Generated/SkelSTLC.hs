-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.STLC.Syntax.Generated.SkelSTLC where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.STLC.Syntax.Generated.AbsSTLC

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Language.STLC.Syntax.Generated.AbsSTLC.Ident -> Result
transIdent x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.Ident string -> failure x

transProg :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.Prog' a -> Result
transProg x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.Program _ term -> failure x

transAtom :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.Atom' a -> Result
transAtom x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.AVar _ ident -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.ATerm _ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.ACons _ type_ -> failure x

transApplication :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.Application' a -> Result
transApplication x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.ApplicationAtom _ atom -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.AApplication _ application atom -> failure x

transTerm :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.Term' a -> Result
transTerm x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.ApplicationTerm _ application -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.LetInTerm _ ident term1 term2 -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.LambdaAbsTerm _ ident type_ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.TrueTerm _ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.FalseTerm _ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.IfTerm _ term1 term2 term3 -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.SuccTerm _ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.ZeroTerm _ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.PredTerm _ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.IsZeroTerm _ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.PairTerm _ term1 term2 -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.FstTerm _ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.SndTerm _ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.NilTerm _ type_ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.IsNilTerm _ type_ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.HeadTerm _ type_ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.TailTerm _ type_ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.FixTerm _ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.IsSuccTerm _ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.IsPredTerm _ term -> failure x

transType :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.Type' a -> Result
transType x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.Arrow _ basetype type_ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.Base _ basetype -> failure x

transBaseType :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.BaseType' a -> Result
transBaseType x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.Pair _ type_1 type_2 -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.Nat _ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.Bool _ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.ListT _ type_ -> failure x
