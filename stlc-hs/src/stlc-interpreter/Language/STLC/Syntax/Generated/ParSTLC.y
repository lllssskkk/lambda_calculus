-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Language.STLC.Syntax.Generated.ParSTLC
  ( happyError
  , myLexer
  , pProg
  ) where

import Prelude

import qualified Language.STLC.Syntax.Generated.AbsSTLC
import Language.STLC.Syntax.Generated.LexSTLC

}

%name pProg_internal Prog
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('      { PT _ (TS _ 1)  }
  ')'      { PT _ (TS _ 2)  }
  ','      { PT _ (TS _ 3)  }
  '->'     { PT _ (TS _ 4)  }
  '.'      { PT _ (TS _ 5)  }
  ':'      { PT _ (TS _ 6)  }
  '='      { PT _ (TS _ 7)  }
  'Bool'   { PT _ (TS _ 8)  }
  'Nat'    { PT _ (TS _ 9)  }
  '['      { PT _ (TS _ 10) }
  ']'      { PT _ (TS _ 11) }
  'cons'   { PT _ (TS _ 12) }
  'else'   { PT _ (TS _ 13) }
  'false'  { PT _ (TS _ 14) }
  'first'  { PT _ (TS _ 15) }
  'fix'    { PT _ (TS _ 16) }
  'head'   { PT _ (TS _ 17) }
  'if'     { PT _ (TS _ 18) }
  'in'     { PT _ (TS _ 19) }
  'isPred' { PT _ (TS _ 20) }
  'isSucc' { PT _ (TS _ 21) }
  'isZero' { PT _ (TS _ 22) }
  'isnil'  { PT _ (TS _ 23) }
  'lam'    { PT _ (TS _ 24) }
  'let'    { PT _ (TS _ 25) }
  'nil'    { PT _ (TS _ 26) }
  'pred'   { PT _ (TS _ 27) }
  'second' { PT _ (TS _ 28) }
  'succ'   { PT _ (TS _ 29) }
  'tail'   { PT _ (TS _ 30) }
  'then'   { PT _ (TS _ 31) }
  'true'   { PT _ (TS _ 32) }
  'zero'   { PT _ (TS _ 33) }
  '{'      { PT _ (TS _ 34) }
  '}'      { PT _ (TS _ 35) }
  L_Ident  { PT _ (TV _)    }

%%

Ident :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Ident) }
Ident  : L_Ident { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.Ident (tokenText $1)) }

Prog :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Prog) }
Prog
  : Term { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.Program (fst $1) (snd $1)) }

Atom :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Atom) }
Atom
  : Ident { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.AVar (fst $1) (snd $1)) }
  | '(' Term ')' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.ATerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'cons' Type { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.ACons (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }

Application :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Application) }
Application
  : Atom { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.ApplicationAtom (fst $1) (snd $1)) }
  | Application Atom { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.AApplication (fst $1) (snd $1) (snd $2)) }

Term :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Term) }
Term
  : Application { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.ApplicationTerm (fst $1) (snd $1)) }
  | 'let' Ident '=' Term 'in' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.LetInTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | 'lam' Ident ':' Type '.' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.LambdaAbsTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | 'true' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.TrueTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.FalseTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1))) }
  | 'if' Term 'then' Term 'else' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.IfTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | 'succ' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.SuccTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'zero' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.ZeroTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1))) }
  | 'pred' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.PredTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'isZero' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.IsZeroTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '{' Term ',' Term '}' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.PairTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'first' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.FstTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'second' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.SndTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'nil' Type { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.NilTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'isnil' Type Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.IsNilTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'head' Type Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.HeadTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'tail' Type Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.TailTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'fix' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.FixTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'isSucc' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.IsSuccTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'isPred' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.IsPredTerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }

Type :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Type) }
Type
  : BaseType '->' Type { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.Arrow (fst $1) (snd $1) (snd $3)) }
  | BaseType { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.Base (fst $1) (snd $1)) }
  | Type1 { (fst $1, (snd $1)) }

BaseType :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.BaseType) }
BaseType
  : '{' Type ',' Type '}' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.Pair (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'Nat' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.Nat (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1))) }
  | 'Bool' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.Bool (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1))) }
  | '[' Type ']' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.ListT (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }

Type1 :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Type) }
Type1 : Type2 { (fst $1, (snd $1)) }

Type2 :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Type) }
Type2
  : '(' Type ')' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), (snd $2)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProg :: [Token] -> Err Language.STLC.Syntax.Generated.AbsSTLC.Prog
pProg = fmap snd . pProg_internal
}

