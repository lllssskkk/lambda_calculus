-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language STLC.

module Language.STLC.Syntax.Generated.AbsSTLC where

import Prelude (String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Prog = Prog' BNFC'Position
data Prog' a = Program a (Term' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Atom = Atom' BNFC'Position
data Atom' a = AVar a Ident | ATerm a (Term' a) | ACons a (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Application = Application' BNFC'Position
data Application' a
    = ApplicationAtom a (Atom' a)
    | AApplication a (Application' a) (Atom' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Term = Term' BNFC'Position
data Term' a
    = ApplicationTerm a (Application' a)
    | LetInTerm a Ident (Term' a) (Term' a)
    | LambdaAbsTerm a Ident (Type' a) (Term' a)
    | TrueTerm a
    | FalseTerm a
    | IfTerm a (Term' a) (Term' a) (Term' a)
    | SuccTerm a (Term' a)
    | ZeroTerm a
    | PredTerm a (Term' a)
    | IsZeroTerm a (Term' a)
    | PairTerm a (Term' a) (Term' a)
    | FstTerm a (Term' a)
    | SndTerm a (Term' a)
    | NilTerm a (Type' a)
    | IsNilTerm a (Type' a) (Term' a)
    | HeadTerm a (Type' a) (Term' a)
    | TailTerm a (Type' a) (Term' a)
    | FixTerm a (Term' a)
    | IsSuccTerm a (Term' a)
    | IsPredTerm a (Term' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = Arrow a (BaseType' a) (Type' a)
    | Base a (BaseType' a)
    | ListT a (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type BaseType = BaseType' BNFC'Position
data BaseType' a = Pair a (Type' a) (Type' a) | Nat a | Bool a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Prog where
  hasPosition = \case
    Program p _ -> p

instance HasPosition Atom where
  hasPosition = \case
    AVar p _ -> p
    ATerm p _ -> p
    ACons p _ -> p

instance HasPosition Application where
  hasPosition = \case
    ApplicationAtom p _ -> p
    AApplication p _ _ -> p

instance HasPosition Term where
  hasPosition = \case
    ApplicationTerm p _ -> p
    LetInTerm p _ _ _ -> p
    LambdaAbsTerm p _ _ _ -> p
    TrueTerm p -> p
    FalseTerm p -> p
    IfTerm p _ _ _ -> p
    SuccTerm p _ -> p
    ZeroTerm p -> p
    PredTerm p _ -> p
    IsZeroTerm p _ -> p
    PairTerm p _ _ -> p
    FstTerm p _ -> p
    SndTerm p _ -> p
    NilTerm p _ -> p
    IsNilTerm p _ _ -> p
    HeadTerm p _ _ -> p
    TailTerm p _ _ -> p
    FixTerm p _ -> p
    IsSuccTerm p _ -> p
    IsPredTerm p _ -> p

instance HasPosition Type where
  hasPosition = \case
    Arrow p _ _ -> p
    Base p _ -> p
    ListT p _ -> p

instance HasPosition BaseType where
  hasPosition = \case
    Pair p _ _ -> p
    Nat p -> p
    Bool p -> p

