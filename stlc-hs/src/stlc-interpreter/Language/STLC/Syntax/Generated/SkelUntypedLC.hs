-- File generated by the BNF Converter (bnfc 2.9.5).
-- Templates for pattern matching on abstract syntax
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.STLC.Syntax.Generated.SkelSTLC where

import qualified Language.STLC.Syntax.Generated.AbsSTLC
import Prelude (Either (..), Show, String, show, ($), (++))

type Err = Either String

type Result = Err String

failure :: (Show a) => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Language.STLC.Syntax.Generated.AbsSTLC.Ident -> Result
transIdent x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.Ident string -> failure x

transProg :: (Show a) => Language.STLC.Syntax.Generated.AbsSTLC.Prog' a -> Result
transProg x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.Program _ term -> failure x

transAtom :: (Show a) => Language.STLC.Syntax.Generated.AbsSTLC.Atom' a -> Result
transAtom x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.AVar _ ident -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.ATerm _ term -> failure x

transApplication :: (Show a) => Language.STLC.Syntax.Generated.AbsSTLC.Application' a -> Result
transApplication x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.ApplicationAtom _ atom -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.AApplication _ application atom -> failure x

transTerm :: (Show a) => Language.STLC.Syntax.Generated.AbsSTLC.Term' a -> Result
transTerm x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.ApplicationTerm _ application -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.LetInTerm _ ident term1 term2 -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.LambdaAbsTerm _ ident term -> failure x
