-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.STLC.Syntax.Generated.SkelSTLC where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.STLC.Syntax.Generated.AbsSTLC

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Language.STLC.Syntax.Generated.AbsSTLC.Ident -> Result
transIdent x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.Ident string -> failure x

transProg :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.Prog' a -> Result
transProg x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.Program _ term -> failure x

transType :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.Type' a -> Result
transType x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.IntType _ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.BoolType _ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.ArrowType _ type_1 type_2 -> failure x

transInt :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.Int' a -> Result
transInt x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.Succ _ int -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.Zero _ -> failure x

transAtom :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.Atom' a -> Result
transAtom x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.ALitTrue _ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.ALitFalse _ -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.ALitInt _ int -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.AVar _ ident -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.ATerm _ term -> failure x

transLeftAssociativeApplication :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.LeftAssociativeApplication' a -> Result
transLeftAssociativeApplication x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.ApplicationAtom _ atom -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.Application _ leftassociativeapplication atom -> failure x

transTerm :: Show a => Language.STLC.Syntax.Generated.AbsSTLC.Term' a -> Result
transTerm x = case x of
  Language.STLC.Syntax.Generated.AbsSTLC.ApplicationLeft _ leftassociativeapplication -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.LetIn _ ident term1 term2 -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.IfThenElse _ term1 term2 term3 -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.LambdaAbs _ ident type_ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.Tuple _ term1 term2 -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.Fst _ term -> failure x
  Language.STLC.Syntax.Generated.AbsSTLC.Snd _ term -> failure x
