-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Language.STLC.Syntax.Generated.ParSTLC
  ( happyError
  , myLexer
  , pProg
  ) where

import Prelude

import qualified Language.STLC.Syntax.Generated.AbsSTLC
import Language.STLC.Syntax.Generated.LexSTLC

}

%name pProg_internal Prog
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('       { PT _ (TS _ 1)  }
  ')'       { PT _ (TS _ 2)  }
  ','       { PT _ (TS _ 3)  }
  '->'      { PT _ (TS _ 4)  }
  '.'       { PT _ (TS _ 5)  }
  '='       { PT _ (TS _ 6)  }
  'Boolean' { PT _ (TS _ 7)  }
  'Int'     { PT _ (TS _ 8)  }
  'else'    { PT _ (TS _ 9)  }
  'false'   { PT _ (TS _ 10) }
  'first'   { PT _ (TS _ 11) }
  'if'      { PT _ (TS _ 12) }
  'in'      { PT _ (TS _ 13) }
  'lam'     { PT _ (TS _ 14) }
  'let'     { PT _ (TS _ 15) }
  'second'  { PT _ (TS _ 16) }
  'succ'    { PT _ (TS _ 17) }
  'then'    { PT _ (TS _ 18) }
  'true'    { PT _ (TS _ 19) }
  'zero'    { PT _ (TS _ 20) }
  '{'       { PT _ (TS _ 21) }
  '}'       { PT _ (TS _ 22) }
  L_Ident   { PT _ (TV _)    }

%%

Ident :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Ident) }
Ident  : L_Ident { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.Ident (tokenText $1)) }

Prog :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Prog) }
Prog
  : Term { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.Program (fst $1) (snd $1)) }

ListType :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, [Language.STLC.Syntax.Generated.AbsSTLC.Type]) }
ListType
  : {- empty -} { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'NoPosition, []) }
  | Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

Type :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Type) }
Type
  : 'Int' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.IntType (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1))) }
  | 'Boolean' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.BoolType (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1))) }
  | Type '->' Type { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.ArrowType (fst $1) (snd $1) (snd $3)) }

Int :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Int) }
Int
  : 'succ' Int { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.Succ (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'zero' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.Zero (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1))) }

Atom :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Atom) }
Atom
  : 'true' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.ALitTrue (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.ALitFalse (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1))) }
  | Int { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.ALitInt (fst $1) (snd $1)) }
  | Ident { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.AVar (fst $1) (snd $1)) }
  | '(' Term ')' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.ATerm (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }

LeftAssociativeApplication :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.LeftAssociativeApplication) }
LeftAssociativeApplication
  : Atom { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.ApplicationAtom (fst $1) (snd $1)) }
  | LeftAssociativeApplication Atom { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.Application (fst $1) (snd $1) (snd $2)) }

Term :: { (Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position, Language.STLC.Syntax.Generated.AbsSTLC.Term) }
Term
  : LeftAssociativeApplication { (fst $1, Language.STLC.Syntax.Generated.AbsSTLC.ApplicationLeft (fst $1) (snd $1)) }
  | 'let' Ident '=' Term 'in' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.LetIn (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | 'if' Term 'then' Term 'else' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.IfThenElse (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | 'lam' Ident Type '.' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.LambdaAbs (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5)) }
  | '{' Term ',' Term '}' { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.Tuple (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'first' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.Fst (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'second' Term { (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1), Language.STLC.Syntax.Generated.AbsSTLC.Snd (uncurry Language.STLC.Syntax.Generated.AbsSTLC.BNFC'Position (tokenLineCol $1)) (snd $2)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProg :: [Token] -> Err Language.STLC.Syntax.Generated.AbsSTLC.Prog
pProg = fmap snd . pProg_internal
}

