-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.LetPoly.Syntax.Generated.SkelLetPoly where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.LetPoly.Syntax.Generated.AbsLetPoly

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Language.LetPoly.Syntax.Generated.AbsLetPoly.Ident -> Result
transIdent x = case x of
  Language.LetPoly.Syntax.Generated.AbsLetPoly.Ident string -> failure x

transProg :: Show a => Language.LetPoly.Syntax.Generated.AbsLetPoly.Prog' a -> Result
transProg x = case x of
  Language.LetPoly.Syntax.Generated.AbsLetPoly.Program _ term -> failure x

transAtom :: Show a => Language.LetPoly.Syntax.Generated.AbsLetPoly.Atom' a -> Result
transAtom x = case x of
  Language.LetPoly.Syntax.Generated.AbsLetPoly.AVar _ ident -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.ATerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.ACons _ -> failure x

transApplication :: Show a => Language.LetPoly.Syntax.Generated.AbsLetPoly.Application' a -> Result
transApplication x = case x of
  Language.LetPoly.Syntax.Generated.AbsLetPoly.ApplicationAtom _ atom -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.AApplication _ application atom -> failure x

transTerm :: Show a => Language.LetPoly.Syntax.Generated.AbsLetPoly.Term' a -> Result
transTerm x = case x of
  Language.LetPoly.Syntax.Generated.AbsLetPoly.ApplicationTerm _ application -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.LetInTerm _ ident term1 term2 -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.LambdaAbsTerm _ ident term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.TrueTerm _ -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.FalseTerm _ -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.IfTerm _ term1 term2 term3 -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.SuccTerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.ZeroTerm _ -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.PredTerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.IsZeroTerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.PairTerm _ term1 term2 -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.FstTerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.SndTerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.NilTerm _ -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.IsNilTerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.HeadTerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.TailTerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.FixTerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.IsSuccTerm _ term -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.IsPredTerm _ term -> failure x

transType :: Show a => Language.LetPoly.Syntax.Generated.AbsLetPoly.Type' a -> Result
transType x = case x of
  Language.LetPoly.Syntax.Generated.AbsLetPoly.Arrow _ basetype type_ -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.Base _ basetype -> failure x

transBaseType :: Show a => Language.LetPoly.Syntax.Generated.AbsLetPoly.BaseType' a -> Result
transBaseType x = case x of
  Language.LetPoly.Syntax.Generated.AbsLetPoly.Pair _ type_1 type_2 -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.Nat _ -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.Bool _ -> failure x
  Language.LetPoly.Syntax.Generated.AbsLetPoly.ListT _ type_ -> failure x
